name: linux

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

env:
    PERL_USE_UNSAFE_INC: 0
    AUTHOR_TESTING: 1
    AUTOMATED_TESTING: 1
    RELEASE_TESTING: 0
    PERL_CARTON_PATH: $GITHUB_WORKSPACE/local

jobs:
  perl:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        perl-version:
          - '5.34'
          - '5.32'
          - '5.30'
          - '5.28'
          - '5.26'
          - '5.24'
          - '5.22'
          - '5.20'
          - '5.18'
          - '5.16'
          - '5.14'
          - '5.12'
          - '5.10'
        include:
          - perl-version: '5.32'
            os: ubuntu-latest
            coverage: true

    container:
      image: perldocker/perl-tester:${{ matrix.perl-version }}

    steps:
      - uses: actions/checkout@v2
      - name: perl -V
        run: perl -V
      - name: Install D-Bus
        run: apt install -y dbus
      - name: Install AnyEvent (optional)
        run: "cpanm --notest AnyEvent ||:"
      - name: Install IO::Async (optional)
        run: "cpanm --notest IO::Async ||:"
      - name: Install Mojolicious (optional)
        run: "cpanm --notest Mojolicious ||:"
      - name: Install Dependencies
        run: cpanm --notest --installdeps .
      - name: perl Makefile.PL
        run: perl Makefile.PL
      - name: make
        run: make
      - name: Run Tests (no coverage)
        if: ${{ !matrix.coverage }}
        run: make test
      - name: Run tests (with coverage)
        if: ${{ matrix.coverage }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cpanm -n Socket::MsgHdr
          cpanm -n Devel::Cover::Report::Coveralls
          cover -test -report Coveralls
      - name: Run tests - verbose (with coverage)
        if: ${{ matrix.coverage }}
        run: "prove -vl t"

  qemu-alpine:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        platform:
          - i386
          - arm32v6
          - arm32v7
          - s390x

    steps:
      - name: Get the qemu container
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Run tests on ${{ matrix.platform }}
        run: docker run --rm --interactive ${{ matrix.platform }}/alpine sh -c "apk add curl wget cmake perl perl-dev make git gcc g++ libc-dev; echo Cloning $GITHUB_SERVER_URL/$GITHUB_REPOSITORY; git clone --recurse-submodules $GITHUB_SERVER_URL/$GITHUB_REPOSITORY; cd $( echo $GITHUB_REPOSITORY | cut -d/ -f2 ); echo Checking out $GITHUB_SHA; git checkout $GITHUB_SHA; perl -V; curl -L https://cpanmin.us | perl - --verbose --notest --installdeps --with-configure .; curl -L https://cpanmin.us | perl - --verbose --notest Socket::MsgHdr AnyEvent IO::Async Mojolicious; perl Makefile.PL; make; prove -wlvmb t"
